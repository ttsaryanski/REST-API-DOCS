openapi: 3.0.0
info:
    title: Multi-Client REST API
    version: 1.0.1
    description: This online version displays only the implemented routes and does not support request execution. To try out the full functionality, clone the repository and follow the setup instructions!

servers:
    - url: http://localhost:3000/api

paths:
    /games_play/authGame/register:
        post:
            summary: User registration
            tags: [GamesPlay Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GamesPlayAuthRegisterUserData"
            responses:
                204:
                    description: No Content - Register is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Set JWT in cookie
                            schema:
                                type: string
                                example: auth_GamesPlay={accessToken:jwt.token.value}; Path=/; HttpOnly; Secure; SameSite=None
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidEmail:
                                    summary: Invalid email
                                    value:
                                        message: "Invalid email format!"
                                invalidPassword:
                                    summary: Invalid password
                                    value:
                                        message: "Password must be at least 3 characters!"
                409:
                    description: Conflict - Email already registered
                    content:
                        application/json:
                            example:
                                message: "This email already registered!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/authGame/login:
        post:
            summary: User login
            tags: [GamesPlay Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GamesPlayAuthLoginUserData"
            responses:
                204:
                    description: No Content - Login is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Set JWT in cookie
                            schema:
                                type: string
                                example: auth_GamesPlay={accessToken:jwt.token.value}; Path=/; HttpOnly; Secure; SameSite=None
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidEmail:
                                    summary: Invalid email
                                    value:
                                        message: "Invalid email format!"
                                invalidPassword:
                                    summary: Invalid password
                                    value:
                                        message: "Password must be at least 3 characters!"
                401:
                    description: Unauthorized - Invalid password
                    content:
                        application/json:
                            example:
                                message: "Password does not match!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "User does not exist!"
                429:
                    description: Too Many Requests - Too many login attempts
                    content:
                        application/json:
                            example:
                                message: "Too many login attempts. Please try again in 15 minutes."
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/authGame/logout:
        post:
            summary: User logout
            tags: [GamesPlay Auth]
            security:
                - gamesPlay: []
            responses:
                204:
                    description: No Content - Logout is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Clear JWT cookie
                            schema:
                                type: string
                                example: auth_GamesPlay=; Path=/; HttpOnly; Secure; SameSite=None; Max-Age=0
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/authGame/profile:
        get:
            summary: Gets user profile
            tags: [GamesPlay Auth]
            security:
                - gamesPlay: []
            responses:
                200:
                    description: OK - User profile retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayAuthProfileResponse"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no user with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/authGame/updateRole:
        patch:
            summary: Adds a "user" role to all users (deprecated)
            tags: [GamesPlay Auth]
            deprecated: true
            responses:
                200:
                    description: OK - Update successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "The update was successful."
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/admin/games:
        get:
            summary: get all games with pagination (only for admins)
            tags: [GamesPlay Admin]
            security:
                - gamesPlay: []
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number (limit is fixed at 5)
            responses:
                200:
                    description: Ok - Successfully retrieved games
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayAdminGamesListResponse"
                400:
                    description: Bad Request - Invalid page
                    content:
                        application/json:
                            example:
                                message: "Page cannot be less than 1!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required
                    content:
                        application/json:
                            example:
                                message: "Admin access required"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/admin/games/{gameId}:
        delete:
            summary: Deletes a game by ID (only for admins)
            tags: [GamesPlay Admin]
            security:
                - gamesPlay: []
            parameters:
                - in: path
                  name: gameId
                  required: true
                  schema:
                      type: string
                  description: ID of the game (valid ObjectId - 24 characters)
            responses:
                204:
                    description: No Content - Game successfully deleted
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required
                    content:
                        application/json:
                            example:
                                message: "Admin access required"
                404:
                    description: Not Found - Game does not exist
                    content:
                        application/json:
                            example:
                                message: "Game not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/admin/users:
        get:
            summary: Gets all users with pagination (only for admins)
            tags: [GamesPlay Admin]
            security:
                - gamesPlay: []
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number (limit is fixed at 5)
            responses:
                200:
                    description: Ok - Successfully retrieved users
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayAdminUsersListResponse"
                400:
                    description: Bad Request - Invalid page
                    content:
                        application/json:
                            example:
                                message: "Page cannot be less than 1!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required
                    content:
                        application/json:
                            example:
                                message: "Admin access required"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/admin/users/{userId}:
        patch:
            summary: Adds a user as an administrator (only for admins)
            tags: [GamesPlay Admin]
            security:
                - gamesPlay: []
            parameters:
                - in: path
                  name: userId
                  required: true
                  schema:
                      type: string
                  description: ID of the user (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - User successfully updated to admin
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayUserBasic"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required
                    content:
                        application/json:
                            example:
                                message: "Admin access required"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "User not found"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        delete:
            summary: Deletes a user by ID - admins cannot be deleted (only for admins)
            tags: [GamesPlay Admin]
            security:
                - gamesPlay: []
            parameters:
                - in: path
                  name: userId
                  required: true
                  schema:
                      type: string
                  description: ID of the user (valid ObjectId - 24 characters)
            responses:
                204:
                    description: No Content - User successfully deleted
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required or unauthorized action
                    content:
                        application/json:
                            examples:
                                forbiddenAction:
                                    summary: Forbidden action
                                    value:
                                        message: "Cannot delete admin account"
                                notAdmin:
                                    summary: Not an admin
                                    value:
                                        message: "Admin access required"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "User not found"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/admin/stats:
        get:
            summary: Gets statistics for the application with pagination (only for admins)
            tags: [GamesPlay Admin]
            security:
                - gamesPlay: []
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number (limit is fixed at 5)
            responses:
                200:
                    description: Ok - Successfully retrieved statistics
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayAdminStatsResponse"
                400:
                    description: Bad Request - Invalid page
                    content:
                        application/json:
                            example:
                                message: "Page cannot be less than 1!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required
                    content:
                        application/json:
                            example:
                                message: "Admin access required"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/comments/{gameId}:
        get:
            summary: Gets comments for a game by ID
            tags: [GamesPlay Comments]
            parameters:
                - in: path
                  name: gameId
                  required: true
                  schema:
                      type: string
                  description: ID of the game (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved comments
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayGetCommentsResponse"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/comments:
        post:
            summary: Creates a new comment for a game
            tags: [GamesPlay Comments]
            security:
                - gamesPlay: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GamesPlayCreateCommentRequest"
            responses:
                201:
                    description: Created - Comment successfully created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayCreateCommentResponse"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidContent:
                                    summary: Invalid content
                                    value:
                                        message: "Comment must be at least 10 characters!"
                                invalidGameId:
                                    summary: Invalid gameId
                                    value:
                                        message: "Invalid game ID format!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/comments/{commentId}:
        delete:
            summary: Deletes a comment by ID (only for admins)
            tags: [GamesPlay Comments]
            security:
                - gamesPlay: []
            parameters:
                - in: path
                  name: commentId
                  required: true
                  schema:
                      type: string
                  description: ID of the comment (valid ObjectId - 24 characters)
            responses:
                204:
                    description: No Content - Comment successfully deleted
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - admin access required
                    content:
                        application/json:
                            example:
                                message: "Admin access required"
                404:
                    description: Not Found - Comment does not exist
                    content:
                        application/json:
                            example:
                                message: "Comment not found"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/games:
        get:
            summary: Gets all games with optional search and limit
            tags: [GamesPlay Games]
            parameters:
                - in: query
                  name: search
                  schema:
                      type: string
                  required: false
                  description: Searching for games by title

                - in: query
                  name: limit
                  schema:
                      type: integer
                  required: false
                  description: Limit the number of games returned
            responses:
                200:
                    description: Ok - Successfully retrieved games
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayGamesGamesListResponse"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        post:
            summary: Creates a new game
            tags: [GamesPlay Games]
            security:
                - gamesPlay: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GamesPlayGamesCreateGameRequest"
            responses:
                201:
                    description: Created - Game successfully created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayGamesCreateGameResponse"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidTitle:
                                    summary: Invalid title
                                    value:
                                        message: "Game title should be at least 3 characters long!"
                                invalidCategory:
                                    summary: Invalid category
                                    value:
                                        message: "Category should be at least 3 characters long!"
                                invalidMaxLevel:
                                    summary: Invalid max level
                                    value:
                                        message: "MaxLevel...."
                                invalidImgUrl:
                                    summary: Invalid image URL
                                    value:
                                        message: "Invalid image url!"
                                invalidSummary:
                                    summary: Invalid summary
                                    value:
                                        message: "Summary should be at least 10 characters long!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/games/infinity:
        get:
            summary: Gets all games with pagination
            tags: [GamesPlay Games]
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number (limit is fixed at 5)
            responses:
                200:
                    description: Ok - Successfully retrieved games
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayAdminGamesListResponse"
                400:
                    description: Bad Request - Invalid page
                    content:
                        application/json:
                            example:
                                message: "Page cannot be less than 1!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/games/last_three:
        get:
            summary: Gets the last three games
            tags: [GamesPlay Games]
            responses:
                200:
                    description: Ok - Successfully retrieved last three games
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayGamesGamesLast_ThreeResponse"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/games/{gameId}:
        get:
            summary: Gets a game by ID
            tags: [GamesPlay Games]
            parameters:
                - in: path
                  name: gameId
                  required: true
                  schema:
                      type: string
                  description: ID of the game (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved game
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayGamesCreateGameResponse"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Game does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no game with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        put:
            summary: Updates a game by ID (only for authors)
            tags: [GamesPlay Games]
            security:
                - gamesPlay: []
            parameters:
                - in: path
                  name: gameId
                  required: true
                  schema:
                      type: string
                  description: ID of the game (valid ObjectId - 24 characters)
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GamesPlayGamesCreateGameRequest"
            responses:
                201:
                    description: Created - Game successfully updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GamesPlayGamesCreateGameResponse"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidGameId:
                                    summary: Invalid game ID
                                    value:
                                        message: "Id must be a valid MongooseDB ObjectId!"
                                invalidTitle:
                                    summary: Invalid title
                                    value:
                                        message: "Game title should be at least 3 characters long!"
                                invalidCategory:
                                    summary: Invalid category
                                    value:
                                        message: "Category should be at least 3 characters long!"
                                invalidMaxLevel:
                                    summary: Invalid max level
                                    value:
                                        message: "MaxLevel...."
                                invalidImgUrl:
                                    summary: Invalid image URL
                                    value:
                                        message: "Invalid image url!"
                                invalidSummary:
                                    summary: Invalid summary
                                    value:
                                        message: "Summary should be at least 10 characters long!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - only the author of the game can edit it
                    content:
                        application/json:
                            example:
                                message: "You are not the owner of this resource!"
                404:
                    description: Not Found - Game does not exist
                    content:
                        application/json:
                            examples:
                                invalidGameIdMiddleware:
                                    summary: Invalid resource ID
                                    value:
                                        message: "Resource not found!"
                                invalidGameUpdate:
                                    summary: Invalid update
                                    value:
                                        message: "Game not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        delete:
            summary: Deletes a game by ID (only for authors)
            tags: [GamesPlay Games]
            security:
                - gamesPlay: []
            parameters:
                - in: path
                  name: gameId
                  required: true
                  schema:
                      type: string
                  description: ID of the game (valid ObjectId - 24 characters)
            responses:
                204:
                    description: No Content - Game successfully deleted
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - only the author of the game can delete it
                    content:
                        application/json:
                            example:
                                message: "You are not the owner of this resource!"
                404:
                    description: Not Found - Game does not exist
                    content:
                        application/json:
                            examples:
                                invalidGameIdMiddleware:
                                    summary: Invalid resource ID
                                    value:
                                        message: "Resource not found!"
                                invalidGameUpdate:
                                    summary: Invalid update
                                    value:
                                        message: "Game not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /games_play/visit:
        post:
            summary: Tracks a visit to the GamesPlay site
            tags: [GamesPlay Visit]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                page:
                                    type: string
                                    example: home
            responses:
                201:
                    description: Created - Visit successfully tracked
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 123
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/authAngular/register:
        post:
            summary: User registration
            tags: [CookingTogether Auth]
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            $ref: "#/components/schemas/CookingAuthRegisterRequest"
            responses:
                204:
                    description: No Content - Register is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Set JWT in cookie
                            schema:
                                type: string
                                example: auth_cooking={accessToken:jwt.token.value}; Path=/; HttpOnly; Secure; SameSite=None
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidUserName:
                                    summary: Invalid user name
                                    value:
                                        message: "Username must be at least 3 characters!"
                                invalidEmail:
                                    summary: Invalid email
                                    value:
                                        message: "Invalid email format!"
                                invalidPassword:
                                    summary: Invalid password
                                    value:
                                        message: "Password must be at least 3 characters!"
                                invalidRePassword:
                                    summary: Invalid rePassword
                                    value:
                                        message: "rePasswords do not match!"
                409:
                    description: Conflict - UserName or email already registered
                    content:
                        application/json:
                            example:
                                message: "This username or email already registered!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/authAngular/login:
        post:
            summary: User login
            tags: [CookingTogether Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CookingAuthLoginRequest"
            responses:
                204:
                    description: No Content - Login is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Set JWT in cookie
                            schema:
                                type: string
                                example: auth_cooking={accessToken:jwt.token.value}; Path=/; HttpOnly; Secure; SameSite=None
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidEmail:
                                    summary: Invalid email
                                    value:
                                        message: "Invalid email format!"
                                invalidPassword:
                                    summary: Invalid password
                                    value:
                                        message: "Password must be at least 3 characters!"
                401:
                    description: Unauthorized - Invalid password
                    content:
                        application/json:
                            example:
                                message: "Password does not match!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "User does not exist!"
                429:
                    description: Too Many Requests - Too many login attempts
                    content:
                        application/json:
                            example:
                                message: "Too many login attempts. Please try again in 15 minutes."
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/authAngular/logout:
        post:
            summary: User logout
            tags: [CookingTogether Auth]
            security:
                - gamesPlay: []
            responses:
                204:
                    description: No Content - Logout is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Clear JWT cookie
                            schema:
                                type: string
                                example: auth_cooking=; Path=/; HttpOnly; Secure; SameSite=None; Max-Age=0
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/authAngular/profile:
        get:
            summary: Gets user profile
            tags: [CookingTogether Auth]
            security:
                - gamesPlay: []
            responses:
                200:
                    description: OK - User profile retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingAuthProfileResponse"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no user with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes:
        get:
            summary: Gets all recipes with optional search and limit
            tags: [CookingTogether Recipes]
            parameters:
                - in: query
                  name: search
                  schema:
                      type: string
                  required: false
                  description: Searching for recipe by title

                - in: query
                  name: limit
                  schema:
                      type: integer
                  required: false
                  description: Limit the number of recipes returned
            responses:
                200:
                    description: Ok - Successfully retrieved recipes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingRecipesArrayResponse"
                400:
                    description: Bad Request - Invalid limit
                    content:
                        application/json:
                            example:
                                message: "Limit must be a positive integer!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        post:
            summary: Creates a new recipe
            tags: [CookingTogether Recipes]
            security:
                - cookingTogether: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CookingCreateRecipeRequest"
            responses:
                201:
                    description: Created - Recipe successfully created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingSimpleRecipe"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidTitle:
                                    summary: Invalid title
                                    value:
                                        message: "Title should be at least 5 characters long!"
                                invalidDescription:
                                    summary: Invalid description
                                    value:
                                        message: "Description should be at least 10 characters long!"
                                invalidIngredients:
                                    summary: Invalid ingredients
                                    value:
                                        message: "Ingredients should be at least 10 characters long!"
                                invalidInstructions:
                                    summary: Invalid instructions
                                    value:
                                        message: "Instructions should be at least 10 characters long!"
                                invalidImgUrl:
                                    summary: Invalid image URL
                                    value:
                                        message: "Invalid image URL!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes/paginated:
        get:
            summary: Gets all recipes with pagination
            tags: [CookingTogether Recipes]
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 9
                      minimum: 1
                      maximum: 100
                  description: Number of recipes per page (default is 9)
            responses:
                200:
                    description: Ok - Successfully retrieved recipes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingPaginatedRecipesResponse"
                400:
                    description: Bad Request - Invalid page or limit
                    content:
                        application/json:
                            examples:
                                invalidPage:
                                    summary: Invalid page
                                    value:
                                        message: "Page cannot be less than 1!"
                                invalidLimit:
                                    summary: Invalid limit
                                    value:
                                        message: "Limit must be between 1 and 100!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes/top-three:
        get:
            summary: Gets the top three recipes
            tags: [CookingTogether Recipes]
            responses:
                200:
                    description: Ok - Successfully retrieved top three recipes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingTopThreeRecipesResponse"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes/profileItem:
        get:
            summary: Gets all recipes authored by the logged in user with pagination
            tags: [CookingTogether Recipes]
            security:
                - cookingTogether: []
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 5
                      minimum: 1
                      maximum: 100
                  description: Number of recipes per page (default is 5)
            responses:
                200:
                    description: Ok - Successfully retrieved recipes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingPaginatedRecipesResponse"
                400:
                    description: Bad Request - Invalid page or limit
                    content:
                        application/json:
                            examples:
                                invalidPage:
                                    summary: Invalid page
                                    value:
                                        message: "Page cannot be less than 1!"
                                invalidLimit:
                                    summary: Invalid limit
                                    value:
                                        message: "Limit must be between 1 and 100!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes/profileLiked:
        get:
            summary: Gets all recipes that the logged in user has liked with pagination
            tags: [CookingTogether Recipes]
            security:
                - cookingTogether: []
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                      minimum: 1
                  description: Page number
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 5
                      minimum: 1
                      maximum: 100
                  description: Number of recipes per page (default is 5)
            responses:
                200:
                    description: Ok - Successfully retrieved recipes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingPaginatedRecipesResponse"
                400:
                    description: Bad Request - Invalid page or limit
                    content:
                        application/json:
                            examples:
                                invalidPage:
                                    summary: Invalid page
                                    value:
                                        message: "Page cannot be less than 1!"
                                invalidLimit:
                                    summary: Invalid limit
                                    value:
                                        message: "Limit must be between 1 and 100!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes/{recipeId}:
        get:
            summary: Gets a recipe by ID
            tags: [CookingTogether Recipes]
            parameters:
                - in: path
                  name: recipeId
                  required: true
                  schema:
                      type: string
                  description: ID of the recipe (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved recipe
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingSimpleRecipe"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Recipe does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no recipe with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        put:
            summary: Updates a recipe by ID (only for authors)
            tags: [CookingTogether Recipes]
            security:
                - cookingTogether: []
            parameters:
                - in: path
                  name: recipeId
                  required: true
                  schema:
                      type: string
                  description: ID of the recipe (valid ObjectId - 24 characters)
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CookingCreateRecipeRequest"
            responses:
                201:
                    description: Created - Recipe successfully updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingSimpleRecipe"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidTitle:
                                    summary: Invalid title
                                    value:
                                        message: "Title should be at least 5 characters long!"
                                invalidDescription:
                                    summary: Invalid description
                                    value:
                                        message: "Description should be at least 10 characters long!"
                                invalidIngredients:
                                    summary: Invalid ingredients
                                    value:
                                        message: "Ingredients should be at least 10 characters long!"
                                invalidInstructions:
                                    summary: Invalid instructions
                                    value:
                                        message: "Instructions should be at least 10 characters long!"
                                invalidImgUrl:
                                    summary: Invalid image URL
                                    value:
                                        message: "Invalid image URL!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - only the author of the recipe can edit it
                    content:
                        application/json:
                            example:
                                message: "You are not the owner of this resource!"
                404:
                    description: Not Found - Recipe does not exist
                    content:
                        application/json:
                            examples:
                                invalidGameIdMiddleware:
                                    summary: Invalid resource ID
                                    value:
                                        message: "Resource not found!"
                                invalidGameUpdate:
                                    summary: Invalid update
                                    value:
                                        message: "Recipe not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        delete:
            summary: Deletes a recipe by ID (only for authors)
            tags: [CookingTogether Recipes]
            security:
                - cookingTogether: []
            parameters:
                - in: path
                  name: recipeId
                  required: true
                  schema:
                      type: string
                  description: ID of the recipe (valid ObjectId - 24 characters)
            responses:
                204:
                    description: No Content - Recipe successfully deleted
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - only the author of the recipe can delete it
                    content:
                        application/json:
                            example:
                                message: "You are not the owner of this resource!"
                404:
                    description: Not Found - Recipe does not exist
                    content:
                        application/json:
                            examples:
                                invalidGameIdMiddleware:
                                    summary: Invalid resource ID
                                    value:
                                        message: "Resource not found!"
                                invalidGameUpdate:
                                    summary: Invalid update
                                    value:
                                        message: "Recipe not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /cooking/recipes/{recipeId}/like:
        post:
            summary: Logged in user like a recipe by ID
            tags: [CookingTogether Recipes]
            security:
                - cookingTogether: []
            parameters:
                - in: path
                  name: recipeId
                  required: true
                  schema:
                      type: string
                  description: ID of the recipe (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Recipe successfully liked
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CookingSimpleRecipe"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - Recipe does not exist
                    content:
                        application/json:
                            example:
                                message: "Recipe not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/auth/register:
        post:
            description:
                You must provide either secretKey or identifier — only one of the two should be submitted.

                If you choose to use secretKey, leave identifier empty and uncheck the "Send empty value" option.

                If you choose to use identifier, leave secretKey empty and uncheck the "Send empty value" option.

                ⚠️ If both fields are submitted or if both are marked as "empty values", the request will be rejected.
            summary: User registration
            tags: [ClassBook Auth]
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            $ref: "#/components/schemas/ClassBookAuthRegisterRequest"
            responses:
                204:
                    description: No Content - Register is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Set JWT in cookie
                            schema:
                                type: string
                                example: auth={accessToken:jwt.token.value}; Path=/; HttpOnly; Secure; SameSite=None
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidFirstName:
                                    summary: Invalid first name
                                    value:
                                        message: "First name should be at least 3 characters long!"
                                invalidLastName:
                                    summary: Invalid last name
                                    value:
                                        message: "Last name should be at least 3 characters long!"
                                invalidEmail:
                                    summary: Invalid email
                                    value:
                                        message: "Invalid email format!"
                                invalidPassword:
                                    summary: Invalid password
                                    value:
                                        message: "Password must be at least 6 characters long!"
                                invalidSecretKey:
                                    summary: Invalid secretKey
                                    value:
                                        message: "Secret key must be a string!"
                                invalidIdentifier:
                                    summary: Invalid identifier
                                    value:
                                        message: "Identifier must be exactly 10 digits!"
                                invalidImageUpload:
                                    summary: Invalid file type
                                    value:
                                        message: "Invalid file type. Only jpg, jpeg, and png files are allowed!"
                409:
                    description: Conflict - Email already registered
                    content:
                        application/json:
                            example:
                                message: "This email already registered!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/auth/login:
        post:
            summary: User login
            tags: [ClassBook Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CookingAuthLoginRequest"
            responses:
                204:
                    description: No Content - Login is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Set JWT in cookie
                            schema:
                                type: string
                                example: auth={accessToken:jwt.token.value}; Path=/; HttpOnly; Secure; SameSite=None
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidEmail:
                                    summary: Invalid email
                                    value:
                                        message: "Invalid email format!"
                                invalidPassword:
                                    summary: Invalid password
                                    value:
                                        message: "Password must be at least 6 characters long!"
                401:
                    description: Unauthorized - Invalid password
                    content:
                        application/json:
                            example:
                                message: "Password does not match!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "User does not exist!"
                429:
                    description: Too Many Requests - Too many login attempts
                    content:
                        application/json:
                            example:
                                message: "Too many login attempts. Please try again in 15 minutes."
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/auth/logout:
        post:
            summary: User logout
            tags: [ClassBook Auth]
            security:
                - classBook: []
            responses:
                204:
                    description: No Content - Logout is successful (no content)
                    headers:
                        Set-Cookie:
                            description: Clear JWT cookie
                            schema:
                                type: string
                                example: auth=; Path=/; HttpOnly; Secure; SameSite=None; Max-Age=0
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/auth/profile:
        get:
            summary: Gets user profile
            tags: [ClassBook Auth]
            security:
                - classBook: []
            responses:
                200:
                    description: OK - User profile retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookAuthProfileResponse"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no user with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        put:
            summary: Updates user profile
            tags: [ClassBook Auth]
            security:
                - classBook: []
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            $ref: "#/components/schemas/ClassBookAuthEditProfileRequest"
            responses:
                201:
                    description: Created - User profile successfully updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookAuthProfileResponse"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidFirstName:
                                    summary: Invalid first name
                                    value:
                                        message: "First name should be at least 3 characters long!"
                                invalidLastName:
                                    summary: Invalid last name
                                    value:
                                        message: "Last name should be at least 3 characters long!"
                                invalidImageUpload:
                                    summary: Invalid file type
                                    value:
                                        message: "Invalid file type. Only jpg, jpeg, and png files are allowed!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - User does not exist
                    content:
                        application/json:
                            example:
                                message: "User not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/clss:
        get:
            summary: Gets all classes with optional search and limit
            tags: [ClassBook Class]
            parameters:
                - in: query
                  name: search
                  schema:
                      type: string
                  required: false
                  description: Searching for classes by title

                - in: query
                  name: limit
                  schema:
                      type: integer
                  required: false
                  description: Limit the number of classes returned
            responses:
                200:
                    description: Ok - Successfully retrieved classes
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookClassArrayResponse"
                400:
                    description: Bad Request - Invalid limit
                    content:
                        application/json:
                            example:
                                message: "Limit must be a positive integer!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        post:
            summary: Creates a new class
            tags: [ClassBook Class]
            security:
                - classBook: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ClassBookCreateClassRequest"
            responses:
                201:
                    description: Created - Class successfully created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleClass"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidTitle:
                                    summary: Invalid title
                                    value:
                                        message: "Title should be at least 3 characters long!"
                                invalidTeacher:
                                    summary: Invalid teacher ID
                                    value:
                                        message: "Teacher must be a valid ObjectId!"
                                invalidStudents:
                                    summary: Invalid students ID
                                    value:
                                        message: "Each student must be a valid ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/clss/{clssId}:
        get:
            summary: Gets a class by ID
            tags: [ClassBook Class]
            parameters:
                - in: path
                  name: clssId
                  required: true
                  schema:
                      type: string
                  description: ID of the class (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved class
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleClass"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Class does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no class with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        put:
            summary: Updates a class by ID
            tags: [ClassBook Class]
            security:
                - classBook: []
            parameters:
                - in: path
                  name: clssId
                  required: true
                  schema:
                      type: string
                  description: ID of the class (valid ObjectId - 24 characters)
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ClassBookCreateClassRequest"
            responses:
                201:
                    description: Created - Class successfully updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleClass"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidTitle:
                                    summary: Invalid title
                                    value:
                                        message: "Title should be at least 3 characters long!"
                                invalidTeacher:
                                    summary: Invalid teacher ID
                                    value:
                                        message: "Teacher must be a valid ObjectId!"
                                invalidStudents:
                                    summary: Invalid students ID
                                    value:
                                        message: "Each student must be a valid ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - Class does not exist
                    content:
                        application/json:
                            example:
                                message: "Class not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        delete:
            summary: Deletes a class by ID
            tags: [ClassBook Class]
            security:
                - classBook: []
            parameters:
                - in: path
                  name: clssId
                  required: true
                  schema:
                      type: string
                  description: ID of the class (valid ObjectId - 24 characters)
            responses:
                204:
                    description: No Content - Class successfully deleted
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - Class does not exist
                    content:
                        application/json:
                            example:
                                message: "Class not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/clss/{clssId}/populate:
        get:
            summary: Gets a class by ID with populate data
            tags: [ClassBook Class]
            description: Gets a class by ID with populate data for teacher and students.
            parameters:
                - in: path
                  name: clssId
                  required: true
                  schema:
                      type: string
                  description: ID of the class (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved class
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookPopulateClass"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Class does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no class with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/director:
        post:
            summary: Set director and teacher secret keys (deprecated)
            tags: [ClassBook Director]
            deprecated: true
            description:
                This endpoint creates the initial registration keys (secretKey) for role assignment (e.g., teacher or director).

                ⚠️ Only one settings record is allowed. If registration keys have already been created, this endpoint becomes unavailable and will return a 403 Forbidden response.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ClassBookCreateSecretsRequest"
            responses:
                201:
                    description: Created - Secret keys successfully created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookCreateSecretsResponse"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidTeacherKey:
                                    summary: Invalid teacherKey
                                    value:
                                        message: "Teacher key must be at least 10 characters long!"
                                invalidDirectorKey:
                                    summary: Invalid directorKey
                                    value:
                                        message: "Director key must be at least 10 characters long!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Secret keys already exist!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/teacher:
        get:
            summary: Gets all teachers with optional search
            tags: [ClassBook Teacher]
            parameters:
                - in: query
                  name: email
                  schema:
                      type: string
                  required: false
                  description: Searching for teachers by email
            responses:
                200:
                    description: Ok - Successfully retrieved teachers
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ClassBookSimpleTeacher"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/teacher/{teacherId}:
        get:
            summary: Gets a teacher by ID
            tags: [ClassBook Teacher]
            parameters:
                - in: path
                  name: teacherId
                  required: true
                  schema:
                      type: string
                  description: ID of the teacher (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved teacher
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleTeacher"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Teacher does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no teacher with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        put:
            summary: Updates a teacher by ID
            tags: [ClassBook Teacher]
            description:
                You can provide either clssToAdd or clssToRemove to update the teacher's assigned classes, but not both at the same time.

                If clssToAdd is present, clssToRemove must be omitted.

                If clssToRemove is present, clssToAdd must be omitted.

                You may also omit both if no class change is needed.

                ⚠️ If both fields are submitted in the same request, the operation will be rejected.
            security:
                - classBook: []
            parameters:
                - in: path
                  name: teacherId
                  required: true
                  schema:
                      type: string
                  description: ID of the teacher (valid ObjectId - 24 characters)
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ClassBookEditTeacherRequest"
            responses:
                201:
                    description: Created - Teacher successfully updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleTeacher"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidFirstName:
                                    summary: Invalid first name
                                    value:
                                        message: "First name should be at least 3 characters long!"
                                invalidLastName:
                                    summary: Invalid last name
                                    value:
                                        message: "Last name should be at least 3 characters long!"
                                invalidSpeciality:
                                    summary: Invalid speciality
                                    value:
                                        message: "Speciality should be at least 3 characters long!"
                                invalidClssToAdd:
                                    summary: Invalid class to add
                                    value:
                                        message: "Class must be a valid ObjectId!"
                                invalidClssToRemove:
                                    summary: Invalid class to remove
                                    value:
                                        message: "Class must be a valid ObjectId!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - Teacher does not exist
                    content:
                        application/json:
                            example:
                                message: "Teacher not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/student:
        get:
            summary: Gets all students with optional limit
            tags: [ClassBook Student]
            parameters:
                - in: query
                  name: limit
                  schema:
                      type: integer
                  required: false
                  description: Limit the number of students returned
            responses:
                200:
                    description: Ok - Successfully retrieved students
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookStudentArrayResponse"
                400:
                    description: Bad Request - Invalid limit
                    content:
                        application/json:
                            example:
                                message: "Limit must be a positive integer!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        post:
            summary: Creates a new student from director
            tags: [ClassBook Student]
            security:
                - classBook: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ClassBookCreateStudentRequest"
            responses:
                201:
                    description: Created - Student successfully created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookStudentWithoutEmail"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidFirstName:
                                    summary: Invalid first name
                                    value:
                                        message: "First name should be at least 3 characters long!"
                                invalidLastName:
                                    summary: Invalid last name
                                    value:
                                        message: "Last name should be at least 3 characters long!"
                                invalidIdentifier:
                                    summary: Invalid identifier
                                    value:
                                        message: "Identifier must be exactly 10 digits!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/student/paginated:
        post:
            summary: Gets all students with pagination
            tags: [ClassBook Student]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PaginationRequest"

            responses:
                200:
                    description: Ok - Successfully retrieved students
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookPaginatedStudentResponse"
                400:
                    description: Bad Request - Invalid page or limit
                    content:
                        application/json:
                            examples:
                                invalidPage:
                                    summary: Invalid page
                                    value:
                                        message: "Page cannot be less than 1!"
                                invalidLimit:
                                    summary: Invalid limit
                                    value:
                                        message: "Limit must be between 1 and 100!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/student/{studentId}:
        get:
            summary: Gets a student by ID
            tags: [ClassBook Student]
            parameters:
                - in: path
                  name: studentId
                  required: true
                  schema:
                      type: string
                  description: ID of the student (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved student
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleStudent"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Student does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no student with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."
        put:
            summary: Updates a student by ID
            tags: [ClassBook Student]
            description:
                You can provide either clssToAdd or clssToRemove to update the student's assigned classes, but not both at the same time.

                If clssToAdd is present, clssToRemove must be omitted.

                If clssToRemove is present, clssToAdd must be omitted.

                You may also omit both if no class change is needed.

                ⚠️ If both fields are submitted in the same request, the operation will be rejected.
            security:
                - classBook: []
            parameters:
                - in: path
                  name: studentId
                  required: true
                  schema:
                      type: string
                  description: ID of the student (valid ObjectId - 24 characters)
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ClassBookEditStudentRequest"
            responses:
                201:
                    description: Created - Student successfully updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookSimpleStudent"
                400:
                    description: Bad Request - Invalid data
                    content:
                        application/json:
                            examples:
                                invalidClssToAdd:
                                    summary: Invalid class to add
                                    value:
                                        message: "Class must be a valid ObjectId!"
                                invalidClssToRemove:
                                    summary: Invalid class to remove
                                    value:
                                        message: "Class must be a valid ObjectId!"
                                invalidGradesTeacher:
                                    summary: Invalid grades teacher
                                    value:
                                        message: "Teacher must be a valid ObjectId!"
                                invalidGradesClass:
                                    summary: Invalid grades class
                                    value:
                                        message: "Class must be a valid ObjectId!"
                                invalidGradesValue:
                                    summary: Invalid grades value
                                    value:
                                        message: "Grade cannot be less than 2! or Grade cannot be greater than 6!"
                                invalidGradesComment:
                                    summary: Invalid grades comment
                                    value:
                                        message: "Comment must be a string!"
                401:
                    description: Unauthorized - Missing token
                    content:
                        application/json:
                            example:
                                message: "Missing token!"
                403:
                    description: Forbidden - Access denied
                    content:
                        application/json:
                            example:
                                message: "Invalid token!"
                404:
                    description: Not Found - Student does not exist
                    content:
                        application/json:
                            example:
                                message: "Student not found!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

    /class/student/{studentId}/populate:
        get:
            summary: Gets a student by ID with populate data
            tags: [ClassBook Student]
            description: Gets a student by ID with populate data for grades, grades class and grades teacher.
            parameters:
                - in: path
                  name: studentId
                  required: true
                  schema:
                      type: string
                  description: ID of the student (valid ObjectId - 24 characters)
            responses:
                200:
                    description: Ok - Successfully retrieved student
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClassBookPopulateStudent"
                400:
                    description: Bad Request - Invalid ID
                    content:
                        application/json:
                            example:
                                message: "Id must be a valid MongooseDB ObjectId!"
                404:
                    description: Not Found - Student does not exist
                    content:
                        application/json:
                            example:
                                message: "There is no student with this id!"
                500:
                    description: Internal Server Error - Server error
                    content:
                        application/json:
                            example:
                                message: "Internal server error..."

components:
    securitySchemes:
        gamesPlay:
            type: apiKey
            in: cookie
            name: auth_GamesPlay
        cookingTogether:
            type: apiKey
            in: cookie
            name: auth_cooking
        classBook:
            type: apiKey
            in: cookie
            name: auth
    schemas:
        GamesPlayAuthRegisterUserData:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    example: user@example.com
                password:
                    type: string
                    example: 123456

        GamesPlayAuthLoginUserData:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    example: user@testemail.com
                password:
                    type: string
                    example: password

        GamesPlayAuthProfileResponse:
            type: object
            properties:
                _id:
                    type: string
                    example: 60c72b2f9b1e8b001c8e4d3a
                email:
                    type: string
                    example: user@example.com
                role:
                    type: string
                    example: "user"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        GamesPlayAdminGamesListResponse:
            type: object
            properties:
                games:
                    type: array
                    items:
                        $ref: "#/components/schemas/GamesPlayGame"

        GamesPlayGame:
            type: object
            properties:
                _id:
                    type: string
                    example: "6833318fd414ea08fac843ec"
                title:
                    type: string
                    example: "Test"
                category:
                    type: string
                    example: "Test category"
                maxLevel:
                    type: integer
                    example: 95
                imageUrl:
                    type: string
                    format: uri
                    example: "https://example.com/image.jpg"
                summary:
                    type: string
                _ownerId:
                    $ref: "#/components/schemas/GamesPlayUserBasic"
                createdAt:
                    type: string
                    format: date-time
                    example: "2025-05-25T15:04:47.780Z"
                updatedAt:
                    type: string
                    format: date-time
                    example: "2025-05-25T15:04:47.784Z"

        GamesPlayUserBasic:
            type: object
            properties:
                _id:
                    type: string
                    example: "6833307c97d956479e7c161e"
                email:
                    type: string
                    example: "user@example.com"
                role:
                    type: string
                    example: "user"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2025-05-25T15:00:12.341Z"

        GamesPlayAdminUsersListResponse:
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: "#/components/schemas/GamesPlayUserBasic"

        GamesPlayAdminStatsResponse:
            type: object
            properties:
                stats:
                    type: array
                    items:
                        type: object
                        properties:
                            _id:
                                type: string
                                example: "60c72b2f9b1e8b001c8e4d3a"
                            ip:
                                type: string
                                example: "xxx.xxx.xxx.xxx"
                            timestamp:
                                type: string
                                format: date-time
                                example: "2021-06-14T12:00:00Z"
                totalCount:
                    type: integer
                    example: 100

        GamesPlayGetCommentsResponse:
            type: array
            items:
                type: object
                properties:
                    _id:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                    gameId:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                    content:
                        type: string
                        example: "This is an example game comment."
                    _ownerId:
                        $ref: "#/components/schemas/GamesPlayUserBasic"
                    createdAt:
                        type: string
                        format: date-time
                        example: "2021-06-14T12:00:00Z"
                    updatedAt:
                        type: string
                        format: date-time
                        example: "2021-06-14T12:00:00Z"

        GamesPlayCreateCommentRequest:
            type: object
            required:
                - content
                - gameId
            properties:
                content:
                    type: string
                    example: "This is a new comment for the game."
                gameId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3b"

        GamesPlayCreateCommentResponse:
            type: object
            properties:
                gameId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                content:
                    type: string
                    example: "This is a new comment for the game."
                _ownerId:
                    $ref: "#/components/schemas/GamesPlayUserBasic"
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                createdAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        GamesPlayGamesGamesListResponse:
            type: array
            items:
                $ref: "#/components/schemas/GamesPlayGame"

        GamesPlayGamesCreateGameRequest:
            type: object
            required:
                - title
                - category
                - maxLevel
                - imageUrl
                - summary
            properties:
                title:
                    type: string
                    example: "New Game Title"
                category:
                    type: string
                    example: "Action"
                maxLevel:
                    type: integer
                    example: 50
                imageUrl:
                    type: string
                    format: uri
                    example: "https://example.com/game-image.jpg"
                summary:
                    type: string
                    example: "This is a brief summary of the game."

        GamesPlayGamesCreateGameResponse:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                title:
                    type: string
                    example: "New Game Title"
                category:
                    type: string
                    example: "Action"
                maxLevel:
                    type: integer
                    example: 50
                imageUrl:
                    type: string
                    format: uri
                    example: "https://example.com/game-image.jpg"
                summary:
                    type: string
                    example: "This is a brief summary of the game."
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                createdAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        GamesPlayGamesGamesLast_ThreeResponse:
            type: array
            items:
                $ref: "#/components/schemas/GamesPlayGamesCreateGameResponse"

        CookingAuthRegisterRequest:
            type: object
            required:
                - username
                - email
                - password
                - rePassword
            properties:
                username:
                    type: string
                    example: example
                email:
                    type: string
                    example: user@example.com
                password:
                    type: string
                    example: 123456
                rePassword:
                    type: string
                    example: 123456
                profilePicture:
                    type: string
                    format: binary

        CookingAuthLoginRequest:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    example: user@example.com
                password:
                    type: string
                    example: 123456

        CookingAuthProfileResponse:
            type: object
            properties:
                _id:
                    type: string
                    example: 60c72b2f9b1e8b001c8e4d3a
                username:
                    type: string
                    example: example
                email:
                    type: string
                    example: user@example.com
                profilePicture:
                    type: object
                    properties:
                        fileName:
                            type: string
                            example: profile.jpg
                        fileUrl:
                            type: string
                            format: uri
                            example: "https://example.com/profile.jpg"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        CookingRecipesArrayResponse:
            type: array
            items:
                $ref: "#/components/schemas/CookingSimpleRecipe"

        CookingSimpleRecipe:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                title:
                    type: string
                    example: "Recipe Title"
                description:
                    type: string
                    example: "This is a brief description of the recipe."
                ingredients:
                    type: string
                    example: "Ingredient 1, Ingredient 2, Ingredient 3"
                instructions:
                    type: string
                    example: "Step-by-step instructions for the recipe."
                imageUrl:
                    type: string
                    format: uri
                    example: "https://example.com/recipe-image.jpg"
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                likes:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"

        CookingCreateRecipeRequest:
            type: object
            required:
                - title
                - description
                - ingredients
                - instructions
                - imageUrl
            properties:
                title:
                    type: string
                    example: "New Recipe Title"
                description:
                    type: string
                    example: "New recipe description."
                ingredients:
                    type: string
                    example: "New recipe ingredient."
                instructions:
                    type: string
                    example: "New recipe instructions."
                imageUrl:
                    type: string
                    format: uri
                    example: "https://example.com/recipe-image.jpg"

        CookingPaginatedRecipesResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/CookingSimpleRecipe"
                totalCount:
                    type: integer
                    example: 100
                totalPages:
                    type: integer
                    example: 10
                currentPage:
                    type: integer
                    example: 1

        CookingTopThreeRecipesResponse:
            type: array
            items:
                $ref: "#/components/schemas/CookingSimpleTopThreeRecipe"

        CookingSimpleTopThreeRecipe:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                title:
                    type: string
                    example: "Recipe Title"
                description:
                    type: string
                    example: "This is a brief description of the recipe."
                ingredients:
                    type: string
                    example: "Ingredient 1, Ingredient 2, Ingredient 3"
                instructions:
                    type: string
                    example: "Step-by-step instructions for the recipe."
                imageUrl:
                    type: string
                    format: uri
                    example: "https://example.com/recipe-image.jpg"
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                likes:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                likesCount:
                    type: integer
                    example: 10

        ClassBookAuthRegisterRequest:
            type: object
            required:
                - firstName
                - lastName
                - email
                - password
            properties:
                firstName:
                    type: string
                    example: firstNameExample
                lastName:
                    type: string
                    example: lastNameExample
                email:
                    type: string
                    example: user@example.com
                password:
                    type: string
                    example: 123456
                secretKey:
                    type: string
                    example: teacher_secret_key
                    description: Provide only if identifier is not used. Use "teacher_secret_key". Leave identifier empty and uncheck "Send empty value".
                identifier:
                    type: integer
                    example: 1234567890
                    description: Provide only if secretKey is not used. Leave secretKey empty and uncheck "Send empty value".
                profilePicture:
                    type: string
                    format: binary
                    description: Optional profile picture file upload. If you don't select a file uncheck "Send empty value".

        ClassBookAuthProfileResponse:
            type: object
            properties:
                _id:
                    type: string
                    example: 60c72b2f9b1e8b001c8e4d3a
                firstName:
                    type: string
                    example: exampleFirstName
                lastName:
                    type: string
                    example: exampleLastName
                email:
                    type: string
                    example: user@example.com
                role:
                    type: string
                    example: student
                profilePicture:
                    type: object
                    properties:
                        fileName:
                            type: string
                            example: profile.jpg
                        fileUrl:
                            type: string
                            format: uri
                            example: "https://example.com/profile.jpg"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        ClassBookAuthEditProfileRequest:
            type: object
            required:
                - firstName
                - lastName
            properties:
                firstName:
                    type: string
                    example: firstNameExample
                lastName:
                    type: string
                    example: lastNameExample
                profilePicture:
                    type: string
                    format: binary
                    description: Optional profile picture file upload. If you don't select a file uncheck "Send empty value".

        ClassBookClassArrayResponse:
            type: array
            items:
                $ref: "#/components/schemas/ClassBookSimpleClass"

        ClassBookSimpleClass:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                title:
                    type: string
                    example: "Class Title"
                teacher:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                students:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                _createdBy:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                createdAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        ClassBookCreateClassRequest:
            type: object
            required:
                - title
                - teacher
            properties:
                title:
                    type: string
                    example: "example Title"
                teacher:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                students:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3b"

        ClassBookPopulateClass:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                title:
                    type: string
                    example: "Class Title"
                teacher:
                    $ref: "#/components/schemas/ClassBookSimpleTeacher"
                students:
                    type: array
                    items:
                        $ref: "#/components/schemas/ClassBookSimpleStudent"
                _createdBy:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                createdAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        ClassBookSimpleTeacher:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                firstName:
                    type: string
                    example: "TeacherFirstName"
                lastName:
                    type: string
                    example: "TeacherLastName"
                email:
                    type: string
                    example: "teacher@email.com"
                clss:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                speciality:
                    type: string
                    example: "MathExample"

        ClassBookSimpleStudent:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                firstName:
                    type: string
                    example: "TeacherFirstName"
                lastName:
                    type: string
                    example: "TeacherLastName"
                email:
                    type: string
                    example: "teacher@email.com"
                identifier:
                    type: string
                    example: "1234567890"
                clss:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                grades:
                    type: array
                    items:
                        $ref: "#/components/schemas/ClassBookSimpleGrades"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        ClassBookSimpleGrades:
            type: object
            properties:
                teacher:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                class:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                value:
                    type: integer
                    example: "5"
                comment:
                    type: string
                    example: "Example comment"
                date:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"

        ClassBookCreateSecretsRequest:
            type: object
            required:
                - teacherKey
                - directorKey
            properties:
                teacherKey:
                    type: string
                    example: "example teacherKey"
                directorKey:
                    type: string
                    example: "example directorKey"

        ClassBookCreateSecretsResponse:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                teacherKey:
                    type: string
                    example: "example secret key"
                directorKey:
                    type: string
                    example: "example secret key"
                createdAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        ClassBookEditTeacherRequest:
            type: object
            properties:
                firstName:
                    type: string
                    example: editFirstName
                lastName:
                    type: string
                    example: editLastName
                speciality:
                    type: string
                    example: editSpeciality
                clssToAdd:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                clssToRemove:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"

        ClassBookStudentArrayResponse:
            type: array
            items:
                $ref: "#/components/schemas/ClassBookSimpleStudent"

        ClassBookCreateStudentRequest:
            type: object
            required:
                - firstName
                - lastName
                - identifier
            properties:
                firstName:
                    type: string
                    example: FirstName
                lastName:
                    type: string
                    example: LastName
                identifier:
                    type: string
                    example: "1234567890"

        ClassBookStudentWithoutEmail:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                firstName:
                    type: string
                    example: "TeacherFirstName"
                lastName:
                    type: string
                    example: "TeacherLastName"
                identifier:
                    type: string
                    example: "1234567890"
                clss:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                grades:
                    type: array
                    items:
                        $ref: "#/components/schemas/ClassBookSimpleGrades"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"

        PaginationRequest:
            type: object
            required:
                - page
                - limit
            properties:
                page:
                    type: integer
                    example: 1
                    description: Page number
                limit:
                    type: integer
                    example: 9
                    description: Number of students per page (default is 9)

        ClassBookPaginatedStudentResponse:
            type: object
            properties:
                students:
                    type: array
                    items:
                        $ref: "#/components/schemas/ClassBookSimpleStudent"
                totalCount:
                    type: integer
                    example: 100
                totalPages:
                    type: integer
                    example: 10
                currentPage:
                    type: integer
                    example: 1

        ClassBookEditStudentRequest:
            type: object
            properties:
                clssToAdd:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                clssToRemove:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                grades:
                    type: array
                    items:
                        $ref: "#/components/schemas/ClassBookSimpleGrades"

        ClassBookPopulateStudent:
            type: object
            properties:
                _id:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                firstName:
                    type: string
                    example: "TeacherFirstName"
                lastName:
                    type: string
                    example: "TeacherLastName"
                email:
                    type: string
                    example: "teacher@email.com"
                identifier:
                    type: string
                    example: "1234567890"
                clss:
                    type: array
                    items:
                        type: string
                        example: "60c72b2f9b1e8c001f8e4d3a"
                _ownerId:
                    type: string
                    example: "60c72b2f9b1e8c001f8e4d3a"
                grades:
                    type: array
                    items:
                        type: object
                        properties:
                            teacher:
                                type: object
                                $ref: "#/components/schemas/ClassBookSimpleTeacher"
                            class:
                                type: object
                                $ref: "#/components/schemas/ClassBookSimpleClass"
                            value:
                                type: integer
                                example: "5"
                            commnet:
                                type: string
                                example: "Example"
                            _id:
                                type: string
                                example: "60c72b2f9b1e8c001f8e4d3a"
                            date:
                                type: string
                                format: date-time
                                example: "2021-06-14T12:00:00Z"
                dateCreated:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
                dateUpdate:
                    type: string
                    format: date-time
                    example: "2021-06-14T12:00:00Z"
